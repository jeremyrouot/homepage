/* 
 batch("/data/Resilio/Work/Travail/EPF/Teaching/Stack/prog/1A/gen_vec.wxm");
 */

lmxchar:"(";
gen(x):=(-1)^rand(2)*(rand(7));
normInf(v):=max(makelist(abs(v[i]),i,1,length(v)));
genvec(n):=(v:[], for i:1 while i<=n do { v:append(v,[gen(0)]) }, v); 
genvecCano(n):=(v:makelist(0,i,1,n),v[1+rand(n)]:1,v); 

/*dimension */
N:2+rand(4);
/*nombre de vecteurs */
p:max(1,N-1-rand(2));
lp:[];
lv:[];
matv:matrix([0]);
while not rank(matv)=p do {for k:1 while k<=p do {aux:genvec(N),lv:append(lv,[aux])},matv:apply('matrix,lv)};

ch:rand(2)+1;
if (p=1 and not is(equal(normInf(lv[1]),0))) then ch:2;

if (ch=1 and p>=2 and N-p>=2) then (p:p+1,lv:append(lv,[gen(0)*matv[1]+gen(0)*matv[2]])); 


lch1:[false,true];
res1:lch1[ch];
vadd:genvecCano(N);
lvv:append(lv,[vadd]);
matvv:apply('matrix,lvv);

while (not rank(matvv)=p+1) do {vadd:genvecCano(N),lvv:append(lv,[vadd]),matvv:apply('matrix,lvv)};

lch2:[inf,vadd];
res2:lch2[ch];

plu:if p=1 then "" else "s";

M1:apply('matrix,lv);
fam1:makelist(transpose(M1[i]),i,1,p);


